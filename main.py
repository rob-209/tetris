import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ config - –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
from config import BOT_TOKEN, BOARD_WIDTH, BOARD_HEIGHT, CELL_SIZE, BORDER, RECORDS_FILE, SHAPES, COLORS
from database.records import RecordsManager
from handlers.menu import MenuHandler
from handlers.records_handler import RecordsHandler
from handlers.game_handler import GameHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TetrisBot:
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
        if not BOT_TOKEN:
            raise ValueError(
                "‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "üìù –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n"
                "   - –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω\n"
                "   - –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è\n\n"
                "üåê –î–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render.com:\n"
                "   - –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ Environment Variables"
            )
        
        self.records_manager = RecordsManager()
        self.menu_handler = MenuHandler(self.records_manager)
        self.records_handler = RecordsHandler(self.records_manager)
        self.game_handler = GameHandler(self.records_manager)
        
        self.application = Application.builder().token(BOT_TOKEN).build()
        self._setup_handlers()
    
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("play", self.play))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await self.menu_handler.show_main_menu(update, context)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "üéÆ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!",
            parse_mode='Markdown'
        )
    
    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play"""
        user = update.effective_user
        await self.game_handler.start_game(update, context, update.message, user)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        
        logger.info(f"Callback received: {query.data} from user {user.id}")
        
        # –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        if query.data == "main_menu":
            await self.menu_handler.show_main_menu(update, context, query.message)
        
        elif query.data == "play_game":
            await self.game_handler.start_game(update, context, query.message, user)
        
        elif query.data == "show_records":
            await self.records_handler.show_records(update, context, query.message)
        
        elif query.data == "my_stats":
            await self.records_handler.show_user_stats(update, context, query.message, user)
        
        elif query.data == "show_rules":
            await self.menu_handler.show_rules(update, context, query.message)
        
        # –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥–∞–µ–º –≤ game_handler
        elif query.data in ["left", "right", "down", "rotate", "drop", "end_game"]:
            await self.game_handler.handle_game_action(update, context, query, user)
        
        else:
            logger.warning(f"Unknown callback data: {query.data}")
            await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("üéÆ –ë–æ—Ç –¢–µ—Ç—Ä–∏—Å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞")
        print("üöÄ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
        
        self.application.run_polling()

if __name__ == '__main__':
    bot = TetrisBot()
    bot.run()