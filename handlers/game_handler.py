from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
import io
from game.tetris import TetrisGame
from game.renderer import GameRenderer

class GameHandler:
    def __init__(self, records_manager):
        self.records_manager = records_manager
        self.renderer = GameRenderer()
        self.games = {}
    
    async def handle_game_action(self, update, context, query, user):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        # –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if query.data in ["left", "right", "down", "rotate", "drop", "end_game"]:
            await self._handle_game_actions(update, context, query, user)
    
    async def _handle_game_actions(self, update, context, query, user):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        chat_id = query.message.chat_id
        
        if query.data == "end_game":
            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if chat_id in self.games:
                del self.games[chat_id]
            await self._show_game_over_menu(query, user)
            return
        
        if chat_id not in self.games:
            await self.start_game(update, context, query.message, user)
            return
        
        game = self.games[chat_id]
        
        # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        if query.data == "left": 
            game.move(-1, 0)
        elif query.data == "right": 
            game.move(1, 0)
        elif query.data == "down": 
            game.move(0, 1)
        elif query.data == "rotate": 
            game.rotate()
        elif query.data == "drop": 
            game.drop()
        
        if game.game_over:
            await self._show_game_over(query, user, game)
        else:
            await self._update_game_display(query, user, game)
    
    async def start_game(self, update, context, message, user):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        chat_id = message.chat_id
        self.games[chat_id] = TetrisGame()
        await self._send_game_message(message, user)
    
    def _create_game_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="left"),
                InlineKeyboardButton("üîÑ", callback_data="rotate"),
                InlineKeyboardButton("‚û°Ô∏è", callback_data="right")
            ],
            [
                InlineKeyboardButton("‚¨áÔ∏è –ë—ã—Å—Ç—Ä–µ–µ", callback_data="down"),
                InlineKeyboardButton("üí® –°–±—Ä–æ—Å–∏—Ç—å", callback_data="drop")
            ],
            [
                InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game")
            ],
            [
                InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
            ]
        ]
        return keyboard
    
    async def _send_game_message(self, message, user):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        chat_id = message.chat_id
        game = self.games[chat_id]
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä—ã
        try:
            img = self.renderer.create_game_image(game)
            bio = io.BytesIO()
            img.save(bio, 'PNG')
            bio.seek(0)
            
            keyboard = self._create_game_keyboard()
            text = self._create_game_status_text(user, game)
            
            await message.reply_photo(
                photo=bio,
                caption=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            keyboard = self._create_game_keyboard()
            text = self._create_game_status_text(user, game) + "\n\nüñºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä—ã"
            
            await message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    
    async def _update_game_display(self, query, user, game):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é)
            img = self.renderer.create_game_image(game)
            bio = io.BytesIO()
            img.save(bio, 'PNG')
            bio.seek(0)
            
            keyboard = self._create_game_keyboard()
            text = self._create_game_status_text(user, game)
            
            await query.edit_message_media(
                media=InputMediaPhoto(media=bio, caption=text, parse_mode='Markdown'),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
            try:
                keyboard = self._create_game_keyboard()
                text = self._create_game_status_text(user, game) + "\n\nüñºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception as e2:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e2}")
                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._send_game_message(query.message, user)
    
    async def _show_game_over(self, query, user, game):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
        user_data = {'username': user.username, 'first_name': user.first_name}
        self.records_manager.update_record(user.id, user_data, game.score)
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        chat_id = query.message.chat_id
        if chat_id in self.games:
            del self.games[chat_id]
        
        text = f"üíÄ **–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!**\n‚≠ê –û—á–∫–∏: **{game.score}**"
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="play_game")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤", callback_data="show_records")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await self._safe_edit_message(query, text, keyboard)
    
    async def _show_game_over_menu(self, query, user):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
        chat_id = query.message.chat_id
        game = self.games.get(chat_id)
        score = game.score if game else 0
        
        if game:
            user_data = {'username': user.username, 'first_name': user.first_name}
            self.records_manager.update_record(user.id, user_data, score)
            if chat_id in self.games:
                del self.games[chat_id]
        
        text = f"‚èπÔ∏è **–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n‚≠ê –ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤: **{score}**"
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="play_game")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤", callback_data="show_records")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await self._safe_edit_message(query, text, keyboard)
    
    def _create_game_status_text(self, user, game):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã"""
        return f"üéÆ **–ò–≥—Ä–∞ –¢–µ—Ç—Ä–∏—Å**\nüë§ –ò–≥—Ä–æ–∫: {user.first_name}\n‚≠ê –û—á–∫–∏: **{game.score}**\nüìä –£—Ä–æ–≤–µ–Ω—å: **{game.level}**"
    
    async def _safe_edit_message(self, query, text, keyboard):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )